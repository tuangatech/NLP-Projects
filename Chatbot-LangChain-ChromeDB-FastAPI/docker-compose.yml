# Defines the services, networks, and volumes for the RAG chatbot application.
services:
  # ChromaDB vector store service
  chromadb:
    # image: chromadb/chroma:1.0.9 # Uses the official ChromaDB image (check for latest stable version)
    build:
      context: ./chromadb # Build the Docker image from the Dockerfile in the /chroma directory
      dockerfile: Dockerfile
    container_name: rag_chromadb_container
    ports:
      - "8001:8000" # Exposes ChromaDB's API on host port 8001 (container default is 8000)
    volumes:
      - chroma_data:/chroma_data # Mounts a named volume for persistent ChromaDB data (Chroma's default path)
    environment:
      - IS_PERSISTENT=true # Enable persistent mode
      - PERSIST_DIRECTORY=/chroma_data # Tell Chroma where to store data
      - CHROMA_SERVER_HOST=chromadb # For internal service communication
      - CHROMA_SERVER_HTTP_PORT=8000
      - ANONYMIZED_TELEMETRY=false # Opt out of telemetry
    healthcheck: # Defines a health check for the ChromaDB service
      test: ["CMD-SHELL", "curl -s http://localhost:8000/api/v2/heartbeat | grep -q 'heartbeat'"]
      interval: 10s # How often to run the health check
      timeout: 20s # How long to wait for the health check to complete
      retries: 5 # Number of retries before marking as unhealthy
      start_period: 60s # Grace period for the service to start before health checks begin
    networks:
      - rag_network # Connects the service to the custom network
    restart: unless-stopped
  
  # Ingestion pipeline: loads PDFs into ChromaDB
  ingestion:
    build:
      context: ./ingestion
      dockerfile: Dockerfile
    container_name: rag_ingestion_container
    depends_on:
      chromadb:
        condition: service_started # service_healthy Wait until ChromaDB is ready
    volumes:
      - ./pdfs:/app/pdfs # Mount local PDFs into container
      - ./.env:/app/.env # Mount local .env file into container
    environment:
      - CHROMA_HOST=chromadb # Connect to ChromaDB via service name
      - CHROMA_PORT=8000
    networks:
      - rag_network
    restart: on-failure:3 # Restart only on failure

  # Application service (FastAPI backend + Streamlit frontend + Ingestion)
  app:
    build:
      context: ./app # Build the Docker image from the Dockerfile in the /app directory
      dockerfile: Dockerfile
    container_name: rag_app_container
    ports:
      - "8000:8000" # Maps host port 8000 to container port 8000 (for FastAPI)
      - "8501:8501" # Maps host port 8501 to container port 8501 (for Streamlit)
    volumes:
      - ./.env:/app/.env  # Mount .env file for dotenv
    environment:
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
    depends_on:
      chromadb: # Ensures chromadb service is started before the app service
        condition: service_healthy # Waits for chromadb to be healthy (requires healthcheck in chromadb service)
    networks:
      - rag_network # Connects the service to the custom network

volumes:
  # Named volume for ChromaDB persistence
  chroma_data: # Renamed for clarity to distinguish from the old 'chroma_data'
    driver: local # Specifies the local driver for the volume

networks:
  # Custom network for inter-container communication
  rag_network:
    driver: bridge # Specifies the bridge driver for the network
